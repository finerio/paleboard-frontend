{"version":3,"sources":["store/user/selectors.js","config/constants.js","store/appState/actions.js","store/user/actions.js","components/Navigation/index.js","components/Loading/index.js","store/appState/selectors.js","components/MessageBox/index.js","store/therapists/actions.js","store/therapists/selectors.js","pages/SignUp/index.js","pages/Login/index.js","pages/Homepage.js","store/session/selectors.js","pages/SessionTherapist.js","pages/SessionPatient.js","store/patients/selectors.js","store/patients/actions.js","store/session/actions.js","pages/CreateSession.js","pages/WaitForSession.js","App.js","serviceWorker.js","store/appState/reducer.js","store/user/reducer.js","store/patients/reducer.js","store/session/reducer.js","store/therapists/reducer.js","store/rootReducer.js","store/index.js","index.js"],"names":["selectToken","state","user","token","selectUser","selectSocket","socket","apiUrl","process","API_URL","SOCKET_ENDPOINT","APP_LOADING","APP_DONE_LOADING","SET_MESSAGE","CLEAR_MESSAGE","appLoading","type","appDoneLoading","clearMessage","setMessage","variant","dismissable","text","payload","showMessageWithTimeout","timeOutMilliSeconds","dispatch","setTimeout","LOGIN_SUCCESS","TOKEN_STILL_VALID","LOG_OUT","loginSuccess","userWithToken","logOut","Navigation","useDispatch","useSelector","to","exact","email","onClick","Loading","className","Spinner","animation","role","selectAppLoading","appState","loading","selectMessage","message","MessageBox","showMessage","Alert","show","dismissible","onClose","FETCH_THERAPISTS_SUCCESS","selectTherapists","therapists","allTherapists","SignUp","useState","name","setName","setEmail","password","setPassword","setRole","selectedTherapist","setSelectedTherapist","gotTherapists","setGotTherapists","loggedInUser","history","useHistory","length","id","useEffect","therapistId","push","getState","a","axios","get","response","console","log","data","defaultValue","onChange","event","target","value","defaultChecked","controlid","placeholder","required","map","therapist","preventDefault","post","io","transports","signUp","login","style","textAlign","Homepage","selectSessionId","session","selectSession","SessionTherapist","sessionId","sessionPatientId","patientId","sessionRequestAnswered","setSessionRequestAnswered","sessionMsgSent","setSessionMsgSent","emit","on","sketch","p","setup","createCanvas","background","backgroundColor","mouseDragged","x","mouseX","y","mouseY","noStroke","fill","therapistBrushColor","ellipse","newDrawing","patientBrushColor","SessionPatient","selectMyPatients","patients","myPatients","FETCH_MY_PATIENTS_SUCCESS","CREATE_SESSION_SUCCESS","FETCH_SESSION_SUCCESS","DELETE_SESSION_SUCCESS","CreateSession","selectedPatient","setSelectedPatient","gotPatients","setGotPatients","setBackgroundColor","setTherapistBrushColor","setPatientBrushColor","headers","Authorization","patient","createSession","WaitForSession","fetchedSessionId","sentSessionRequest","setSentSessionRequest","existingSessionId","fetchSession","App","isLoading","userWithoutToken","path","component","Login","Boolean","window","location","hostname","match","initialState","localStorage","getItem","combineReducers","action","setItem","removeItem","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","ReduxThunk","store","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c80c6f92.chunk.js","sourcesContent":["export const selectToken = (state) => state.user.token;\n\nexport const selectUser = (state) => state.user;\n\nexport const selectSocket = (state) => state.user.socket;\n","export const apiUrl = process.env.API_URL || \"http://localhost:4000\";\nexport const DEFAULT_MESSAGE_TIMEOUT = 3000;\nexport const SOCKET_ENDPOINT = \"http://localhost:4000\";\n","import { DEFAULT_MESSAGE_TIMEOUT } from \"../../config/constants\";\n\nexport const APP_LOADING = \"APP_LOADING\";\nexport const APP_DONE_LOADING = \"APP_DONE_LOADING\";\nexport const SET_MESSAGE = \"SET_MESSAGE\";\nexport const CLEAR_MESSAGE = \"CLEAR_MESSAGE\";\n\nexport const appLoading = () => ({ type: APP_LOADING });\nexport const appDoneLoading = () => ({ type: APP_DONE_LOADING });\nexport const clearMessage = () => ({ type: CLEAR_MESSAGE });\n\nexport const setMessage = (variant, dismissable, text) => {\n  return {\n    type: SET_MESSAGE,\n    payload: {\n      variant,\n      dismissable,\n      text\n    }\n  };\n};\n\nexport const showMessageWithTimeout = (\n  variant,\n  dismissable,\n  text,\n  timeOutMilliSeconds\n) => {\n  return dispatch => {\n    dispatch(setMessage(variant, dismissable, text));\n\n    const timeout = timeOutMilliSeconds || DEFAULT_MESSAGE_TIMEOUT;\n\n    setTimeout(() => dispatch(clearMessage()), timeout);\n  };\n};\n","import { apiUrl, SOCKET_ENDPOINT } from \"../../config/constants\";\nimport axios from \"axios\";\n\nimport { io } from \"socket.io-client\";\n\nimport { selectToken } from \"./selectors\";\nimport {\n  appLoading,\n  appDoneLoading,\n  showMessageWithTimeout,\n  setMessage,\n} from \"../appState/actions\";\n\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const TOKEN_STILL_VALID = \"TOKEN_STILL_VALID\";\nexport const LOG_OUT = \"LOG_OUT\";\n\nconst loginSuccess = (userWithToken) => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: userWithToken,\n  };\n};\n\nconst tokenStillValid = (userWithoutToken) => ({\n  type: TOKEN_STILL_VALID,\n  payload: userWithoutToken,\n});\n\nexport const logOut = () => ({ type: LOG_OUT });\n\nexport const signUp = (name, email, password, role, therapistId) => {\n  return async (dispatch, getState) => {\n    dispatch(appLoading());\n    try {\n      let response = null;\n\n      if (role === \"patient\") {\n        response = await axios.post(`${apiUrl}/signup-patient`, {\n          name,\n          email,\n          password,\n          therapistId,\n        });\n      } else {\n        response = await axios.post(`${apiUrl}/signup-therapist`, {\n          name,\n          email,\n          password,\n        });\n      }\n\n      const socket = io(SOCKET_ENDPOINT, { transports: [\"websocket\"] });\n\n      response.data.socket = socket;\n\n      dispatch(loginSuccess(response.data));\n\n      dispatch(showMessageWithTimeout(\"success\", true, \"account created\"));\n      dispatch(appDoneLoading());\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data.message);\n        dispatch(setMessage(\"danger\", true, error.response.data.message));\n      } else {\n        console.log(error.message);\n        dispatch(setMessage(\"danger\", true, error.message));\n      }\n      dispatch(appDoneLoading());\n    }\n  };\n};\n\nexport const login = (email, password, role) => {\n  return async (dispatch, getState) => {\n    dispatch(appLoading());\n    try {\n      const response = await axios.post(`${apiUrl}/login-${role}`, {\n        email,\n        password,\n      });\n\n      const socket = io(SOCKET_ENDPOINT, { transports: [\"websocket\"] });\n\n      console.log(\"socket\", socket);\n\n      response.data.socket = socket;\n\n      dispatch(loginSuccess(response.data));\n      dispatch(showMessageWithTimeout(\"success\", false, \"welcome back!\", 1500));\n      dispatch(appDoneLoading());\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data.message);\n        dispatch(setMessage(\"danger\", true, error.response.data.message));\n      } else {\n        console.log(error.message);\n        dispatch(setMessage(\"danger\", true, error.message));\n      }\n      dispatch(appDoneLoading());\n    }\n  };\n};\n\nexport const getUserWithStoredToken = () => {\n  return async (dispatch, getState) => {\n    // get token from the state\n    const token = selectToken(getState());\n\n    // if we have no token, stop\n    if (token === null) return;\n\n    dispatch(appLoading());\n    try {\n      // if we do have a token,\n      // check wether it is still valid or if it is expired\n      const response = await axios.get(`${apiUrl}/me`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      // token is still valid\n      dispatch(tokenStillValid(response.data));\n      dispatch(appDoneLoading());\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.message);\n      } else {\n        console.log(error);\n      }\n      // if we get a 4xx or 5xx response,\n      // get rid of the token by logging out\n      dispatch(logOut());\n      dispatch(appDoneLoading());\n    }\n  };\n};\n","import React from \"react\";\n// import Navbar from \"react-bootstrap/Navbar\";\n// import Nav from \"react-bootstrap/Nav\";\nimport { NavLink } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectToken } from \"../../store/user/selectors\";\nimport { logOut } from \"../../store/user/actions\";\nimport { selectUser } from \"../../store/user/selectors\";\n\nexport default function Navigation() {\n  const dispatch = useDispatch();\n  const token = useSelector(selectToken);\n  const user = useSelector(selectUser);\n\n  return (\n    <div>\n      <NavLink to=\"/\" exact>\n        paleboard\n      </NavLink>\n      {\" | \"}\n      <span>{token ? user.email : \" \"}</span> {\" | \"}{\" \"}\n      {token ? <button onClick={() => dispatch(logOut())}>Logout</button> : \" \"}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport \"./spinner.css\";\n\nexport default function Loading() {\n  return (\n    <div className=\"loading_spinner\">\n      <Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    </div>\n  );\n}\n","export const selectAppLoading = state => state.appState.loading;\nexport const selectMessage = state => state.appState.message;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectMessage } from \"../../store/appState/selectors\";\nimport { Alert } from \"react-bootstrap\";\nimport { clearMessage } from \"../../store/appState/actions\";\n\nexport default function MessageBox() {\n  const message = useSelector(selectMessage);\n  const dispatch = useDispatch();\n  const showMessage = message !== null;\n  if (!showMessage) return null;\n\n  return (\n    <Alert\n      show={showMessage}\n      variant={message.variant}\n      dismissible={message.dismissable}\n      onClose={message.dismissable ? () => dispatch(clearMessage()) : null}\n    >\n      {message.text}\n    </Alert>\n  );\n}\n","import { apiUrl } from \"../../config/constants\";\nimport axios from \"axios\";\n// import { selectUser } from \"../user/selectors\";\nimport { appLoading, appDoneLoading, setMessage } from \"../appState/actions\";\n\nexport const FETCH_THERAPISTS_SUCCESS = \"FETCH_THERAPISTS_SUCCESS\";\n\nexport const fetchTherapistsSuccess = (therapists) => ({\n  type: FETCH_THERAPISTS_SUCCESS,\n  payload: therapists,\n});\n\nexport const fetchAllTherapists = () => {\n  return async (dispatch, getState) => {\n    dispatch(appLoading());\n\n    //  const { token } = selectUser(getState());\n\n    try {\n      const response = await axios.get(`${apiUrl}/therapists`);\n\n      console.log(\"response.data\", response.data);\n      dispatch(fetchTherapistsSuccess(response.data));\n\n      dispatch(appDoneLoading());\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data.message);\n        dispatch(setMessage(\"danger\", true, error.response.data.message));\n      } else {\n        console.log(error.message);\n        dispatch(setMessage(\"danger\", true, error.message));\n      }\n      dispatch(appDoneLoading());\n    }\n  };\n};\n","export const selectTherapists = (state) => state.therapists.allTherapists;\n","import React, { useState, useEffect } from \"react\";\nimport { signUp } from \"../../store/user/actions\";\nimport { fetchAllTherapists } from \"../../store/therapists/actions\";\nimport { selectToken, selectUser } from \"../../store/user/selectors\";\nimport { selectTherapists } from \"../../store/therapists/selectors\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, Link } from \"react-router-dom\";\n\nexport default function SignUp() {\n  const allTherapists = useSelector(selectTherapists);\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [role, setRole] = useState(\"patient\");\n  const [selectedTherapist, setSelectedTherapist] = useState(\"\");\n  const [gotTherapists, setGotTherapists] = useState(false);\n\n  const dispatch = useDispatch();\n  const token = useSelector(selectToken);\n  const loggedInUser = useSelector(selectUser);\n  const history = useHistory();\n\n  if (allTherapists && allTherapists.length > 0 && !gotTherapists) {\n    setSelectedTherapist(allTherapists[0].id);\n    setGotTherapists(true);\n  }\n\n  useEffect(() => {\n    if (token !== null) {\n      if (loggedInUser.therapistId) {\n        history.push(\"/wait-for-session\");\n      } else {\n        history.push(\"/create-session\");\n      }\n    }\n\n    dispatch(fetchAllTherapists());\n  }, [token, history, loggedInUser.therapistId, dispatch]);\n\n  function submitForm(event) {\n    event.preventDefault();\n\n    dispatch(signUp(name, email, password, role, selectedTherapist));\n\n    setEmail(\"\");\n    setPassword(\"\");\n    setName(\"\");\n    setRole(\"patient\");\n    setSelectedTherapist(allTherapists[0].id);\n  }\n\n  return (\n    <div>\n      <form className=\"mt-5\">\n        <h1 className=\"mt-5 mb-5\">Signup</h1>\n        <label>Role: </label>\n        <p></p>\n        <div\n          type=\"radio\"\n          name=\"role\"\n          defaultValue=\"patient\"\n          onChange={(event) => setRole(event.target.value)}\n        >\n          <input\n            type=\"radio\"\n            value=\"patient\"\n            name=\"role\"\n            defaultChecked={true}\n          ></input>\n          <label>Patient</label>{\" \"}\n          <input type=\"radio\" value=\"therapist\" name=\"role\"></input>\n          <label>Therapist</label>\n        </div>{\" \"}\n        <p></p>\n        <fieldset controlid=\"formBasicName\">\n          <label>Name</label>\n          <input\n            value={name}\n            onChange={(event) => setName(event.target.value)}\n            type=\"text\"\n            placeholder=\"Enter name\"\n            required\n          />\n        </fieldset>\n        <fieldset controlid=\"formBasicEmail\">\n          <label>Email address</label>\n          <input\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n            type=\"email\"\n            placeholder=\"Enter email\"\n            required\n          />\n          <p className=\"text-muted\">\n            We'll never share your email with anyone else.\n          </p>\n        </fieldset>\n        <fieldset controlid=\"formBasicPassword\">\n          <label>Password</label>\n          <input\n            value={password}\n            onChange={(event) => setPassword(event.target.value)}\n            type=\"password\"\n            placeholder=\"Password\"\n            required\n          />\n        </fieldset>\n        {role === \"patient\" && (\n          <div>\n            <label>Select therapist:</label>\n            <select\n              onChange={(event) => {\n                setSelectedTherapist(event.target.value);\n              }}\n              value={selectedTherapist}\n            >\n              {allTherapists.map((therapist) => (\n                <option key={therapist.id} value={therapist.id}>\n                  {therapist.name}\n                </option>\n              ))}\n            </select>\n            <p></p>\n          </div>\n        )}\n        <fieldset className=\"mt-5\">\n          <button variant=\"primary\" type=\"submit\" onClick={submitForm}>\n            Sign up\n          </button>\n        </fieldset>\n        <Link to=\"/login\">Click here to log in</Link>\n      </form>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { login } from \"../../store/user/actions\";\nimport { selectToken, selectUser } from \"../../store/user/selectors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, Link } from \"react-router-dom\";\n\nexport default function SignUp() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [role, setRole] = useState(\"patient\");\n  const dispatch = useDispatch();\n  const token = useSelector(selectToken);\n  const loggedInUser = useSelector(selectUser);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (token !== null) {\n      if (loggedInUser.therapistId) {\n        history.push(\"/wait-for-session\");\n      } else {\n        history.push(\"/create-session\");\n      }\n    }\n  }, [token, history, loggedInUser.therapistId]);\n\n  function submitForm(event) {\n    //  console.log(\"hi\");\n    event.preventDefault();\n\n    dispatch(login(email, password, role));\n\n    setEmail(\"\");\n    setPassword(\"\");\n    setRole(\"patient\");\n  }\n\n  return (\n    <div>\n      <form>\n        <h1 className=\"mt-5 mb-5\">Login</h1>\n        <fieldset controlid=\"formBasicEmail\">\n          <label>Role: </label>\n          <p></p>\n          <div\n            type=\"radio\"\n            name=\"role\"\n            defaultValue=\"patient\"\n            onChange={(event) => setRole(event.target.value)}\n          >\n            <input\n              type=\"radio\"\n              value=\"patient\"\n              name=\"role\"\n              defaultChecked={true}\n            ></input>\n            <label>Patient</label>{\" \"}\n            <input type=\"radio\" value=\"therapist\" name=\"role\"></input>\n            <label>Therapist</label>\n          </div>{\" \"}\n          <p></p>\n          <label>Email address</label>\n          <input\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n            type=\"email\"\n            placeholder=\"Enter email\"\n            required\n          />\n        </fieldset>\n\n        <fieldset controlid=\"formBasicPassword\">\n          <label>Password</label>\n          <input\n            value={password}\n            onChange={(event) => setPassword(event.target.value)}\n            type=\"password\"\n            placeholder=\"Password\"\n            required\n          />\n        </fieldset>\n        <fieldset className=\"mt-5\">\n          <button variant=\"primary\" type=\"submit\" onClick={submitForm}>\n            Log in\n          </button>\n        </fieldset>\n        <Link to=\"/signup\" style={{ textAlign: \"center\" }}>\n          Click here to sign up\n        </Link>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\nexport default function Homepage() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <span>Please </span>\n      <Link to=\"/login\">log in</Link>\n      <span> or </span>\n      <Link to=\"/signup\">sign up</Link>\n      <span> to begin</span>\n    </div>\n  );\n}\n","export const selectSessionId = (state) => state.session.id;\n\nexport const selectPatientId = (state) => state.session.patientId;\n\nexport const selectSession = (state) => state.session;\n","import React, { useState, useEffect } from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport P5Wrapper from \"react-p5-wrapper\";\n\nimport { selectSession } from \"../store/session/selectors\";\nimport { selectUser, selectSocket } from \"../store/user/selectors\";\n\nexport default function SessionTherapist() {\n  const history = useHistory();\n\n  const socket = useSelector(selectSocket);\n\n  const session = useSelector(selectSession);\n  const loggedInUser = useSelector(selectUser);\n\n  const sessionId = session.id;\n  const sessionPatientId = session.patientId;\n\n  const [sessionRequestAnswered, setSessionRequestAnswered] = useState(false);\n  const [sessionMsgSent, setSessionMsgSent] = useState(false);\n\n  if (!sessionMsgSent) {\n    if (socket) {\n      console.log(\"sending session message, sessionId = \", sessionId);\n\n      socket.emit(\"session\", sessionId);\n    }\n\n    setSessionMsgSent(true);\n  }\n\n  useEffect(() => {\n    if (!loggedInUser.token) {\n      history.push(\"/\");\n    }\n\n    if (!sessionId) {\n      history.push(\"/create-session\");\n    }\n  }, [sessionId, history, loggedInUser]);\n\n  function sessionRequestHandler(patientId) {\n    console.log(\"sessionRequestHandler( patientId = \", patientId);\n\n    console.log(\"sessionPatientId\", sessionPatientId);\n\n    console.log(\"sessionRequestAnswered\", sessionRequestAnswered);\n\n    console.log(\"sessionId\", sessionId);\n    if (sessionRequestAnswered === false) {\n      if (sessionPatientId === patientId) {\n        console.log(\"sessionPatientId === patientId\");\n\n        console.log(\"sending session message, sessionId = \", sessionId);\n\n        socket.emit(\"session\", sessionId);\n      }\n      setSessionRequestAnswered(true);\n    }\n  }\n\n  if (socket) {\n    socket.on(\"sessionRequest\", sessionRequestHandler);\n  }\n\n  function sketch(p) {\n    p.setup = function () {\n      p.createCanvas(1030, 730);\n      p.background(session.backgroundColor);\n    };\n\n    p.mouseDragged = function () {\n      const data = { x: p.mouseX, y: p.mouseY };\n\n      if (socket) {\n        socket.emit(\"mouse\", data);\n      }\n\n      p.noStroke();\n      p.fill(session.therapistBrushColor);\n      p.ellipse(p.mouseX, p.mouseY, 20, 20);\n    };\n\n    p.newDrawing = function (data) {\n      p.fill(session.patientBrushColor);\n      p.ellipse(data.x, data.y, 20, 20);\n    };\n\n    if (socket) {\n      socket.on(\"mouse\", p.newDrawing);\n    }\n  }\n\n  return (\n    <div>\n      <h1>Therapist view</h1>\n      <P5Wrapper sketch={sketch} />\n    </div>\n  );\n}\n\n// <button onClick={endSessionHandler}>End Session</button>{\" \"}\n\n/* <label>Brush color: </label>\n<input\n  type=\"color\"\n  value={brushColor}\n  onChange={changeBrushColorHandler}\n></input> */\n\n// function changeBrushColorHandler(event) {\n//    event.preventDefault();\n\n//    setBrushColor(event.target.value);\n//  }\n\n// function endSessionHandler() {\n//    dispatch(endSession());\n//    history.push(\"/create-session\");\n//  }\n\n// const [brushColor, setBrushColor] = useState(\"#FFFFFF\");\n","import React, { useEffect } from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport P5Wrapper from \"react-p5-wrapper\";\n\nimport { selectSession } from \"../store/session/selectors\";\nimport { selectUser, selectSocket } from \"../store/user/selectors\";\n\nexport default function SessionPatient() {\n  const history = useHistory();\n\n  const session = useSelector(selectSession);\n  const sessionId = session.id;\n\n  const socket = useSelector(selectSocket);\n\n  const loggedInUser = useSelector(selectUser);\n\n  useEffect(() => {\n    if (!loggedInUser.token) {\n      console.log(\"sending to homepage\");\n      history.push(\"/\");\n    } else if (!sessionId) {\n      console.log(\"sending to wait-for-session\");\n      history.push(\"/wait-for-session\");\n    }\n  }, [sessionId, history, loggedInUser.token]);\n\n  function sketch(p) {\n    p.setup = function () {\n      p.createCanvas(1030, 730);\n      p.background(session.backgroundColor);\n    };\n\n    p.mouseDragged = function () {\n      const data = { x: p.mouseX, y: p.mouseY };\n\n      if (socket) {\n        socket.emit(\"mouse\", data);\n      }\n\n      p.noStroke();\n      p.fill(session.patientBrushColor);\n      p.ellipse(p.mouseX, p.mouseY, 20, 20);\n    };\n\n    p.newDrawing = function (data) {\n      p.noStroke();\n      p.fill(session.therapistBrushColor);\n      p.ellipse(data.x, data.y, 20, 20);\n    };\n\n    if (socket) {\n      socket.on(\"mouse\", p.newDrawing);\n    }\n  }\n\n  return (\n    <div>\n      <h1>Patient view</h1>\n      <P5Wrapper sketch={sketch} />\n    </div>\n  );\n}\n","export const selectMyPatients = (state) => state.patients.myPatients;\n","import { apiUrl } from \"../../config/constants\";\nimport axios from \"axios\";\nimport { selectUser } from \"../user/selectors\";\nimport { appLoading, appDoneLoading, setMessage } from \"../appState/actions\";\n\nexport const FETCH_MY_PATIENTS_SUCCESS = \"FETCH_MY_PATIENTS_SUCCESS\";\n\nexport const fetchMyPatientsSuccess = (patients) => ({\n  type: FETCH_MY_PATIENTS_SUCCESS,\n  payload: patients,\n});\n\nexport const fetchMyPatients = () => {\n  return async (dispatch, getState) => {\n    dispatch(appLoading());\n\n    const { token } = selectUser(getState());\n\n    try {\n      const response = await axios.get(`${apiUrl}/patients/all-my`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      console.log(\"response.data\", response.data);\n      dispatch(fetchMyPatientsSuccess(response.data));\n\n      dispatch(appDoneLoading());\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data.message);\n        dispatch(setMessage(\"danger\", true, error.response.data.message));\n      } else {\n        console.log(error.message);\n        dispatch(setMessage(\"danger\", true, error.message));\n      }\n      dispatch(appDoneLoading());\n    }\n  };\n};\n","import { apiUrl } from \"../../config/constants\";\nimport axios from \"axios\";\nimport { selectUser } from \"../user/selectors\";\nimport { appLoading, appDoneLoading, setMessage } from \"../appState/actions\";\nimport { selectSessionId } from \"./selectors\";\n\n// import { io } from \"socket.io-client\";\n\nexport const CREATE_SESSION_SUCCESS = \"CREATE_SESSION_SUCCESS\";\nexport const FETCH_SESSION_SUCCESS = \"FETCH_SESSION_SUCCESS\";\nexport const DELETE_SESSION_SUCCESS = \"DELETE_SESSION_SUCCESS\";\n\nexport const createSessionSuccess = (session) => ({\n  type: CREATE_SESSION_SUCCESS,\n  payload: session,\n});\n\nexport const fetchSessionSuccess = (session) => ({\n  type: FETCH_SESSION_SUCCESS,\n  payload: session,\n});\n\nexport const deleteSessionSuccess = () => ({\n  type: DELETE_SESSION_SUCCESS,\n});\n\nexport const createSession = (\n  patientId,\n  backgroundColor,\n  therapistBrushColor,\n  patientBrushColor\n) => {\n  return async (dispatch, getState) => {\n    dispatch(appLoading());\n\n    const { token } = selectUser(getState());\n\n    try {\n      const response = await axios.post(\n        `${apiUrl}/session`,\n        {\n          patientId: patientId,\n          backgroundColor: backgroundColor,\n          therapistBrushColor: therapistBrushColor,\n          patientBrushColor: patientBrushColor,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      console.log(\"response.data\", response.data);\n\n      dispatch(createSessionSuccess(response.data.session));\n\n      dispatch(appDoneLoading());\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data.message);\n        dispatch(setMessage(\"danger\", true, error.response.data.message));\n      } else {\n        console.log(error.message);\n        dispatch(setMessage(\"danger\", true, error.message));\n      }\n      dispatch(appDoneLoading());\n    }\n  };\n};\n\nexport const endSession = () => {\n  return async (dispatch, getState) => {\n    console.log(\"endSession thunk begins\");\n\n    dispatch(deleteSessionSuccess());\n\n    dispatch(appLoading());\n\n    const { token } = selectUser(getState());\n\n    try {\n      const response = await axios.delete(`${apiUrl}/session`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      console.log(\"response.data\", response.data);\n      dispatch(deleteSessionSuccess());\n\n      dispatch(appDoneLoading());\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data.message);\n        dispatch(setMessage(\"danger\", true, error.response.data.message));\n      } else {\n        console.log(error.message);\n        dispatch(setMessage(\"danger\", true, error.message));\n      }\n      dispatch(appDoneLoading());\n    }\n\n    console.log(\"endSession thunk ends\");\n  };\n};\n\nexport const fetchSession = (sessionId) => {\n  return async (dispatch, getState) => {\n    const existingSessionId = selectSessionId(getState());\n\n    console.log(\"existingSessionId\", existingSessionId);\n\n    if (!existingSessionId) {\n      dispatch(appLoading());\n\n      const { token } = selectUser(getState());\n\n      try {\n        const response = await axios.get(\n          `${apiUrl}/session?sessionId=${sessionId}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          }\n        );\n\n        console.log(\"response.data\", response.data);\n\n        dispatch(fetchSessionSuccess(response.data.session));\n\n        dispatch(appDoneLoading());\n      } catch (error) {\n        if (error.response) {\n          console.log(error.response.data.message);\n          //   dispatch(setMessage(\"danger\", true, error.response.data.message));\n        } else {\n          console.log(error.message);\n          dispatch(setMessage(\"danger\", true, error.message));\n        }\n        dispatch(appDoneLoading());\n      }\n    }\n  };\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { selectMyPatients } from \"../store/patients/selectors\";\nimport { selectSessionId } from \"../store/session/selectors\";\n\nimport { fetchMyPatients } from \"../store/patients/actions\";\nimport { createSession } from \"../store/session/actions\";\nimport { selectUser } from \"../store/user/selectors\";\n\nexport default function CreateSession() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const myPatients = useSelector(selectMyPatients);\n  const sessionId = useSelector(selectSessionId);\n  const loggedInUser = useSelector(selectUser);\n\n  const [selectedPatient, setSelectedPatient] = useState(\"\");\n  const [gotPatients, setGotPatients] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(\"#F0E6DF\");\n  const [therapistBrushColor, setTherapistBrushColor] = useState(\"#FFFFFF\");\n  const [patientBrushColor, setPatientBrushColor] = useState(\"#000000\");\n\n  if (myPatients && myPatients.length > 0 && !gotPatients) {\n    setSelectedPatient(myPatients[0].id);\n    setGotPatients(true);\n  }\n\n  useEffect(() => {\n    if (!loggedInUser.token) {\n      history.push(\"/\");\n    } else if (sessionId) {\n      history.push(\"/session-therapist\");\n    } else {\n      dispatch(fetchMyPatients());\n    }\n  }, [dispatch, sessionId, history, loggedInUser.token]);\n\n  console.log(\"myPatients\", myPatients);\n\n  function beginSession(event) {\n    event.preventDefault();\n\n    console.log(\"selectedPatient\", selectedPatient);\n\n    dispatch(\n      createSession(\n        selectedPatient,\n        backgroundColor,\n        therapistBrushColor,\n        patientBrushColor\n      )\n    );\n  }\n\n  return (\n    <div>\n      <h1>Create Session</h1>\n      <label>Select patient:</label>{\" \"}\n      <select\n        onChange={(event) => {\n          setSelectedPatient(event.target.value);\n        }}\n        value={selectedPatient}\n      >\n        {myPatients.map((patient) => (\n          <option key={patient.id} value={patient.id}>\n            {patient.name}\n          </option>\n        ))}\n      </select>\n      <p></p>\n      <label>Background color: </label>{\" \"}\n      <input\n        type=\"color\"\n        value={backgroundColor}\n        onChange={(event) => {\n          setBackgroundColor(event.target.value);\n        }}\n      ></input>\n      <p></p>\n      <label>Therapist brush color: </label>{\" \"}\n      <input\n        type=\"color\"\n        value={therapistBrushColor}\n        onChange={(event) => {\n          setTherapistBrushColor(event.target.value);\n        }}\n      ></input>\n      <p></p>\n      <label>Patient brush color: </label>{\" \"}\n      <input\n        type=\"color\"\n        value={patientBrushColor}\n        onChange={(event) => {\n          setPatientBrushColor(event.target.value);\n        }}\n      ></input>\n      <p></p>\n      <button onClick={beginSession}>Begin Session</button>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { selectSession } from \"../store/session/selectors\";\nimport { selectUser, selectSocket } from \"../store/user/selectors\";\n\nimport { fetchSession } from \"../store/session/actions\";\n\nexport default function WaitForSession() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const session = useSelector(selectSession);\n\n  const fetchedSessionId = session.id;\n  const loggedInUser = useSelector(selectUser);\n  const socket = useSelector(selectSocket);\n\n  const [sentSessionRequest, setSentSessionRequest] = useState(false);\n\n  useEffect(() => {\n    console.log(\"fetchedSessionId\", fetchedSessionId);\n\n    if (!loggedInUser.token) {\n      history.push(\"/\");\n    } else if (fetchedSessionId) {\n      history.push(\"/session-patient\");\n    }\n  }, [dispatch, fetchedSessionId, history, loggedInUser.token]);\n\n  function sessionStartedHandler(sessionId) {\n    console.log(\"sessionStartedHandler(sessionId = \", sessionId);\n\n    console.log(\"fetchedSessionId\", fetchedSessionId);\n\n    if (fetchedSessionId === null) {\n      console.log(\n        \"fetchedSessionId is null, fetchedSessionId = fetchedSessionId\"\n      );\n\n      if (sessionId) {\n        dispatch(fetchSession(sessionId));\n      }\n    }\n  }\n\n  if (socket) {\n    socket.on(\"session\", sessionStartedHandler);\n\n    if (!sentSessionRequest) {\n      socket.emit(\"sessionRequest\", loggedInUser.id);\n\n      setSentSessionRequest(true);\n    }\n  }\n\n  return (\n    <div>\n      <h1>Wait For Session</h1>\n      <p>Please wait for your session to begin</p>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\n\nimport { Switch, Route } from \"react-router-dom\";\nimport Navigation from \"./components/Navigation\";\nimport Loading from \"./components/Loading\";\nimport MessageBox from \"./components/MessageBox\";\nimport SignUp from \"./pages/SignUp\";\nimport Login from \"./pages/Login\";\nimport Homepage from \"./pages/Homepage\";\nimport SessionTherapist from \"./pages/SessionTherapist\";\nimport SessionPatient from \"./pages/SessionPatient\";\nimport CreateSession from \"./pages/CreateSession\";\nimport WaitForSession from \"./pages/WaitForSession\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectAppLoading } from \"./store/appState/selectors\";\nimport { getUserWithStoredToken } from \"./store/user/actions\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectAppLoading);\n\n  useEffect(() => {\n    dispatch(getUserWithStoredToken());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <MessageBox />\n      {isLoading ? <Loading /> : null}\n      <Switch>\n        <Route exact path=\"/\" component={Homepage} />\n        <Route path=\"/signup\" component={SignUp} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/session-therapist\" component={SessionTherapist} />\n        <Route path=\"/session-patient\" component={SessionPatient} />\n        <Route path=\"/wait-for-session\" component={WaitForSession} />\n        <Route path=\"/create-session\" component={CreateSession} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  APP_LOADING,\n  APP_DONE_LOADING,\n  SET_MESSAGE,\n  CLEAR_MESSAGE,\n} from \"./actions\";\n\nconst initialState = {\n  loading: false,\n  message: null,\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case APP_LOADING:\n      return { ...state, loading: true };\n\n    case APP_DONE_LOADING:\n      return { ...state, loading: false };\n\n    case SET_MESSAGE:\n      return { ...state, message: action.payload };\n\n    case CLEAR_MESSAGE:\n      return { ...state, message: null };\n\n    default:\n      return state;\n  }\n}\n","import { LOG_OUT, LOGIN_SUCCESS, TOKEN_STILL_VALID } from \"./actions\";\n\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  name: null,\n  email: null,\n  therapistId: null,\n  socket: null,\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_SUCCESS:\n      localStorage.setItem(\"token\", action.payload.token);\n      return { ...state, ...action.payload };\n\n    case LOG_OUT:\n      localStorage.removeItem(\"token\");\n      return { ...initialState, token: null };\n\n    case TOKEN_STILL_VALID:\n      return { ...state, ...action.payload };\n\n    default:\n      return state;\n  }\n}\n","import { FETCH_MY_PATIENTS_SUCCESS } from \"./actions\";\n\nconst initialState = {\n  myPatients: [],\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_MY_PATIENTS_SUCCESS: {\n      return {\n        ...state,\n        myPatients: [...action.payload],\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import {\n  CREATE_SESSION_SUCCESS,\n  DELETE_SESSION_SUCCESS,\n  FETCH_SESSION_SUCCESS,\n} from \"./actions\";\n\nconst initialState = {\n  id: null,\n  therapistId: null,\n  patientId: null,\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case CREATE_SESSION_SUCCESS: {\n      return { ...state, ...action.payload };\n    }\n    case FETCH_SESSION_SUCCESS: {\n      return { ...state, ...action.payload };\n    }\n    case DELETE_SESSION_SUCCESS: {\n      return initialState;\n    }\n    default:\n      return state;\n  }\n}\n","import { FETCH_THERAPISTS_SUCCESS } from \"./actions\";\n\nconst initialState = {\n  allTherapists: [],\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_THERAPISTS_SUCCESS: {\n      return {\n        ...state,\n        allTherapists: [...action.payload],\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport appState from \"./appState/reducer\";\nimport user from \"./user/reducer\";\nimport patients from \"./patients/reducer\";\nimport session from \"./session/reducer\";\nimport therapists from \"./therapists/reducer\";\n\nexport default combineReducers({\n  appState,\n  user,\n  patients,\n  session,\n  therapists,\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\n\nimport ReduxThunk from \"redux-thunk\";\nimport reducer from \"./rootReducer\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(ReduxThunk));\n\nconst store = createStore(reducer, enhancer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}